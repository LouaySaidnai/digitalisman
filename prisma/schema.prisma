// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider="mysql"
  url      = env("DATABASE_URL")
}

model Produit {
  id Int @id @default(autoincrement())

  // Informations de base
  nom       String
  sousTitre String?
  slug      String  @unique

  // Tarification (JSON structuré)
  prix         Json // Format: "495€" ou { "Atelier": "495€", "Programme": "1990€" } ou { "original": "495€", "promo": "295€", "condition": "sur rendez-vous" }
  prixOriginal String? // Prix barré pour les promos

  // Ciblage et positionnement
  niveauPriorite   Int? // 1 (urgent), 2 (moyen), 3 (complémentaire)
  cible            String?
  conceptFondateur Json? // Format: { "probleme": "...", "solution": "..." } 

  // Contenu et processus
  contenu   String? @db.Text
  processus String? @db.Text // Description du processus en texte libre, sans limite de taille
  duree     String? // "3 semaines", "60 minutes", etc.

  // Livrables et supports
  livrablesDetailles String? @db.Text
  supportsInclus     String?

  // Preuves sociales
  temoignages          String?
  argumentsCommerciaux String?

  // Médias
  imageHero   String?
  videoUrl    String?
  gifSolution String?

  // Écosystème et entonnoir
  entonnoirNaturel String? // Nom du produit précédent dans l'entonnoir

  // Urgence et conditions
  urgence String? // Message d'urgence (ex: concurrence sur un produit)

  // Nouveaux champs
  scriptType         String? // La "question magique" qui fait que ce coaching fonctionne
  format             String? // Type de service: "Coaching live", "Formation", "Webinaire", etc.
  QuestionReponse    Json? // FAQ structurée en JSON
  conditionsPaiement String? // "3x sans frais"
  garantie           String? // "Satisfait ou remboursé 30 jours"

  // Métadonnées
  statut           String   @default("actif")
  dateCreation     DateTime @default(now())
  dateModification DateTime @updatedAt

  // Calendrier des événements
  meeting Json? // Format: { "nom_event": [{ "date": "2024-12-20", "type": "webinaire" }, { "date": "2024-12-23", "type": "individuel" }] }

  // Disponibilité du produit
  disponibilite String? // "disponible", "non  disponible" sinon "iconnu"

  // Relationship with TestResult
  testResults TestResult[]
  

}

model TestResult {
  id          Int      @id @default(autoincrement())
  userId      Int
  answers     Json
  personality String
  createdAt   DateTime @default(now())

  // Relationship with Produit
  produitId Int?
  produit   Produit? @relation(fields: [produitId], references: [id])
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  nom             String?
  prenom          String?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  factures Facture[]
  utilisationsCoupon UtilisationCoupon[]
}

model Facture {
  id        Int      @id @default(autoincrement())
  
  // Informations client (capturées au moment de la facturation)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  
  // Données client persistantes (en cas de suppression de l'utilisateur)
  clientEmail    String? // Email du client au moment de la facturation
  clientNom      String? // Nom du client au moment de la facturation
  clientPrenom   String? // Prénom du client au moment de la facturation
  
  // Informations de facturation
  numeroFacture String   @unique // Format: "FAC-2024-001"
  dateFacture   DateTime @default(now())
  statut        String   @default("en_attente") // "en_attente", "payee", "annulee", "remboursee"
  
  // Données des produits (capturées au moment de l'achat)
  produits Json // Format: [{ "nomProduit": "...", "quantiteProduit": 1, "prixUnitaire": "497€", "prixTotal": "497€" }]
  
  // Totaux
  sousTotal    Float    @default(0)
  reduction    Float    @default(0) // Montant de la réduction appliquée
  total        Float    @default(0)
  
  // Informations de paiement
  methodePaiement String @default("carte") // Mode unique pour les formations
  referencePaiement String? // Référence du paiement externe
  datePaiement DateTime?
  
  // Informations d'accès aux formations
  dateAcces DateTime? // Date d'activation de l'accès
  statutAcces String @default("en_attente") // "en_attente", "active", "expiree"
  
  // Métadonnées
  notes String? @db.Text // Notes internes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  utilisationsCoupon UtilisationCoupon[]

  @@index([userId])
  @@index([numeroFacture])
  @@index([dateFacture])
  @@index([statut])
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique // Code unique du coupon (ex: "WELCOME10")
  description String?  // Description du coupon
  
  // Type de réduction
  typeReduction String // "pourcentage" ou "montant_fixe"
  valeurReduction Float // 10 pour 10% ou 50 pour 50€
  
  // Conditions d'utilisation
  montantMinimum Float? // Montant minimum de commande requis
  montantMaximum Float? // Montant maximum de réduction : Exactement ! Le montant de réduction ne doit jamais dépasser le montant maximum défini par l'admin.
  
  // Limites d'utilisation
  nombreUtilisationsMax Int? // Nombre maximum d'utilisations totales
  nombreUtilisationsActuelles Int @default(0) // Nombre d'utilisations actuelles
  
  // Limites par utilisateur
  nombreUtilisationsParUtilisateur Int @default(1) // Nombre d'utilisations par utilisateur
  
  // Dates de validité
  dateDebut DateTime?
  dateFin   DateTime?
  
  // Statut
  actif Boolean @default(true)
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  utilisationsCoupon UtilisationCoupon[]
}

model UtilisationCoupon {//c un journal pour mettre dans la base quel utilisateur a utilisé quel coupon sur quelle facture en faite
  id        Int      @id @default(autoincrement())
  
  // Relations
  couponId  Int
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  factureId Int?
  facture   Facture? @relation(fields: [factureId], references: [id])
  
  // Détails de l'utilisation
  montantReduction Float
  montantCommande  Float
  
  // Métadonnées
  createdAt DateTime @default(now())
  
  @@index([couponId])
  @@index([userId])
  @@index([factureId])
}
